{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-81aa9ea3a6d5dcd158e6b9fb2c66244b61a78342",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Invoice/Invoice.sol": "project/contracts/Invoice/Invoice.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Invoice/Invoice.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract InvoiceManager {\r\n    // Item\r\n    struct Item {\r\n        string description;\r\n        uint256 quantity;\r\n        uint256 unitPrice;\r\n    }\r\n\r\n    // Invoice\r\n    struct Invoice {\r\n        address owner;\r\n        uint256 id;\r\n        string title;\r\n        bool paid;\r\n        Item[] items;\r\n    }\r\n\r\n    // Mapping of invoice id to Invoice\r\n    mapping(uint256 => Invoice) public invoices;\r\n    mapping(address => uint256[]) private ownerInvoices;\r\n    uint256 public nextInvoiceId;\r\n\r\n    // Get invoice\r\n    function getInvoice(\r\n        uint256 invoiceId\r\n    ) external view returns (Invoice memory) {\r\n        return invoices[invoiceId];\r\n    }\r\n\r\n    // Create a new invoice\r\n    function createInvoice(string memory title, Item[] memory items) external {\r\n        uint256 invoiceId = nextInvoiceId++;\r\n        Invoice storage inv = invoices[invoiceId];\r\n        inv.owner = msg.sender;\r\n        inv.id = invoiceId;\r\n        inv.title = title;\r\n        inv.paid = false;\r\n\r\n        for (uint256 i = 0; i < items.length; i++) {\r\n            inv.items.push(Item({\r\n                description: items[i].description,\r\n                quantity: items[i].quantity,\r\n                unitPrice: items[i].unitPrice\r\n            }));\r\n        }\r\n\r\n        ownerInvoices[msg.sender].push(invoiceId);\r\n    }\r\n\r\n    function deleteInvoice(uint256 invoiceId) external {\r\n        Invoice storage inv = invoices[invoiceId];\r\n        require(inv.owner == msg.sender, \"Not invoice owner\");\r\n\r\n        // Delete invoice\r\n        delete invoices[invoiceId];\r\n\r\n        // Remove from owner's list\r\n        uint256[] storage ownerInvs = ownerInvoices[msg.sender];\r\n        for (uint256 i = 0; i < ownerInvs.length; i++) {\r\n            if (ownerInvs[i] == invoiceId) {\r\n                ownerInvs[i] = ownerInvs[ownerInvs.length - 1];\r\n                ownerInvs.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add an item to an invoice\r\n    function addItem(\r\n        uint256 invoiceId,\r\n        string memory description,\r\n        uint256 quantity,\r\n        uint256 unitPrice\r\n    ) external {\r\n        Invoice storage inv = invoices[invoiceId];\r\n        require(inv.owner == msg.sender, \"Not invoice owner\");\r\n        inv.items.push(Item(description, quantity, unitPrice));\r\n    }\r\n\r\n    // Remove an item from an invoice by index\r\n    function removeItem(uint256 invoiceId, uint256 index) external {\r\n        Invoice storage inv = invoices[invoiceId];\r\n        require(inv.owner == msg.sender, \"Not invoice owner\");\r\n        require(index < inv.items.length, \"Index out of bounds\");\r\n\r\n        inv.items[index] = inv.items[inv.items.length - 1];\r\n        inv.items.pop();\r\n    }\r\n\r\n    // Get items of an invoice\r\n    function getItems(uint256 invoiceId) external view returns (Item[] memory) {\r\n        return invoices[invoiceId].items;\r\n    }\r\n\r\n    // Calculate total price of an invoice\r\n    function getTotalPrice(uint256 invoiceId) external view returns (uint256) {\r\n        Invoice storage inv = invoices[invoiceId];\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < inv.items.length; i++) {\r\n            total += inv.items[i].quantity * inv.items[i].unitPrice;\r\n        }\r\n        return total;\r\n    }\r\n\r\n    // Pay an invoice\r\n    function payInvoice(uint256 invoiceId) external payable {\r\n        Invoice storage inv = invoices[invoiceId];\r\n        uint256 totalPrice = this.getTotalPrice(invoiceId);\r\n        require(msg.value >= totalPrice, \"Insufficient payment\");\r\n\r\n        // Mark invoice as paid\r\n        inv.paid = true;\r\n\r\n        // Transfer payment to invoice owner\r\n        payable(inv.owner).transfer(totalPrice);\r\n\r\n        // Refund excess payment\r\n        if (msg.value > totalPrice) {\r\n            payable(msg.sender).transfer(msg.value - totalPrice);\r\n        }\r\n    }\r\n\r\n    // Get all invoices created by owner\r\n    function getInvoicesByOwner(address owner) external view returns (Invoice[] memory) {\r\n        uint256[] memory ids = ownerInvoices[owner];\r\n        Invoice[] memory result = new Invoice[](ids.length);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            result[i] = invoices[ids[i]];\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
      }
    }
  }
}